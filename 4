#include "main.h"
/**
* main - main entry point to our shell program
* @ac: argument count 
* @av: array of  string argumements passed to the shell
* Return: 0 on success 1 otherwise
*/
int main(int __attribute__((unused)) ac, char __attribute__((unused)) **av)
{
	char *lineptr = NULL;
	char **command_table;
	char *del = " ";
	size_t n = 0;
	ssize_t char_read;
	pid_t child;
	/*pid_t father;*/
	int status;




	/*Phase 1: Interactive shell running*/
	/* infinite loop to run shell */
	while (1)
	{
		printf("($) ");
		char_read = getline(&lineptr, &n, stdin);
		/* on getline failure return -1 */
		if (char_read == -1)
		{
			/* test if EOF(ctrl + D) has been encountered */
			/*if (feof(stdin))
			{
				printf("\n");
				_exit(0);
			}*/
			printf("\n");
			_exit(1);
		}
		
		/*commands table held in lineptr*/
		*command_table[] = split_string(lineptr,del);
		for(int m = 0; command_table[m] != NULL; m++)
		{
			printf("%s\n",command_table[m]);
		}
		/*executor*/
		/*creat a seperate child process*/
		child = fork();
		if (child == -1)
		{
			perror("Failed to create Process");
		}
		if (child == 0)
		{
			printf("child process started\n");
			if(execve(command_table[0],command_table,NULL) == -1)
			{
				printf("./shell: No such file or directory\n");
				exit(EXIT_FAILURE);
			}
		}
		else
		{
			printf("waiting for child\n");
			wait(&status);
		}


	}
	free(lineptr);
	return (0);
}
